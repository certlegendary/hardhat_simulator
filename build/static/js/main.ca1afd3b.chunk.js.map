{"version":3,"sources":["SimulatorUI/index.js","App.js","index.js"],"names":["SimulatorUI","dragItem","useRef","dragOverItem","useState","newTask","setNewTask","name","id","setBlances","simulates","storage","setStorage","WSstate","setWSstate","activeIdx","setActiveIdx","WS","setWS","op_type","setOp_type","handleSubmit","_storage","_config","console","log","readyState","send","JSON","stringify","start","alert","handleChangeProperty","e","target","value","setBalance","ind","removeSimulation","splice","changeSimulation","drop","copyListItems","dragItemContent","current","useEffect","localStorage","getItem","parse","wss","WebSocket","onmessage","data","type","table","index","findIndex","item","onopen","onclose","setItem","className","style","height","borderRight","onClick","date","Date","push","getTime","blockNumber","tokenAddy","quoteTokenAddy","addTask","onChange","map","length","state","removeTask","taskInd","currentInd","_task","importExistingTask","address","AddBalance","deleteBalance","draggable","onDragStart","position","onDragEnter","onDragEnd","toUpperCase","blockjump","from","placeholder","token_amount","eth_amount","gasLimit","function","params","to","AddSimulation","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca1afd3b.chunk.js","sourcesContent":["import react, { useState, useRef, useEffect } from \"react\"\r\n\r\n\r\nconst SimulatorUI = () => {\r\n    const dragItem = useRef();\r\n    const dragOverItem = useRef();\r\n    const [newTask, setNewTask] = useState(\"\");\r\n    const [storage, setStorage] = useState([{\r\n        name: \"new\",\r\n        id: \"first\",\r\n        setBlances: [],\r\n        simulates: []\r\n\r\n\r\n    }]);\r\n    const [WSstate, setWSstate] = useState(false)\r\n    const [activeIdx, setActiveIdx] = useState(0)\r\n    const [WS, setWS] = useState();\r\n    const op_types = [\r\n        \"\",\r\n        \"quote_approve\",\r\n        \"approve\",\r\n        \"addliquidity\",\r\n        \"limitbuy\",\r\n        \"fomobuy\",\r\n        \"sell\",\r\n        \"blockjump\",\r\n        \"function_call\",\r\n        \"custom\"\r\n\r\n    ];\r\n    const [op_type, setOp_type] = useState(\"\")\r\n\r\n    const addTask = () => {\r\n        if (newTask !== \"\") {\r\n            let _storage = [...storage];\r\n            let date = new Date();\r\n            _storage.push({\r\n                id: date.getTime(),\r\n                start: false,\r\n                name: newTask,\r\n                blockNumber: \"\",\r\n                tokenAddy: \"\",\r\n                quoteTokenAddy: \"\",\r\n                setBlances: [],\r\n                simulates: []\r\n\r\n            });\r\n            setStorage(_storage);\r\n        }\r\n    }\r\n    const removeTask = (ind) => {\r\n        let _storage = [...storage];\r\n        if (storage[ind].start == true) {\r\n            alert(\"Sorry! You can't remove simulating task! Try again after stop this simulation.\")\r\n            return;\r\n        }\r\n        if (ind == _storage.length - 1) {\r\n            setActiveIdx(state => (state - 1))\r\n        }\r\n        _storage.splice(ind, 1);\r\n\r\n        setStorage(_storage);\r\n\r\n    }\r\n    const importExistingTask = (taskInd) => {\r\n        let _storage = localStorage.getItem(\"simulation\");\r\n        _storage = JSON.parse(_storage);\r\n        let currentInd = activeIdx;\r\n        let _task = { ..._storage[taskInd] }\r\n        _task = { ..._task, name: _storage[activeIdx].name };\r\n        _storage[currentInd] = _task\r\n        _storage = JSON.parse(JSON.stringify(_storage))\r\n        setStorage([..._storage]);\r\n    }\r\n    const handleSubmit = () => {\r\n        if (!WSstate) {\r\n            alert(\"This app is not connected to server! Please check the server!\")\r\n            return;\r\n        }\r\n        let _storage = [...storage];\r\n        let _config = {\r\n\r\n            ...storage[activeIdx]\r\n        }\r\n        console.log(WS)\r\n        if (WS.readyState != 0) {\r\n            WS.send(JSON.stringify(_config))\r\n        }\r\n        _storage[activeIdx].start = !_storage[activeIdx].start\r\n        setStorage(_storage)\r\n    }\r\n    //setBlockNumber || tokenAddy ||quoteTokenAddy\r\n    const handleChangeProperty = (e) => {\r\n        let _storage = [...storage];\r\n        _storage[activeIdx][e.target.name] = e.target.value;\r\n        setStorage(_storage);\r\n    }\r\n    const deleteBalance = (ind) => {\r\n        let _storage = [...storage];\r\n        _storage[activeIdx].setBlances.splice(ind, 1);\r\n        setStorage(_storage);\r\n    }\r\n    const AddBalance = () => {\r\n        let _storage = [...storage];\r\n        if (!_storage[activeIdx].setBlances)\r\n            _storage[activeIdx].setBlances = [];\r\n        _storage[activeIdx].setBlances.push({ address: \"\", value: \"\" })\r\n        setStorage(_storage);\r\n    }\r\n    const setBalance = (ind, e) => {\r\n        let _storage = [...storage];\r\n        _storage[activeIdx].setBlances[ind][e.target.name] = e.target.value;\r\n        setStorage(_storage);\r\n    }\r\n    const AddSimulation = () => {\r\n        if (op_type === \"\") {\r\n            return;\r\n        }\r\n        let _storage = [...storage];\r\n        if (!_storage[activeIdx].simulates) {\r\n            _storage[activeIdx].simulates = [];\r\n        }\r\n        _storage[activeIdx].simulates.push({\r\n            op_type: op_type\r\n        })\r\n        setStorage(_storage)\r\n    }\r\n    const removeSimulation = (ind) => {\r\n        let _storage = [...storage];\r\n        _storage[activeIdx].simulates.splice(ind, 1)\r\n        setStorage(_storage)\r\n    }\r\n    const changeSimulation = (ind, e) => {\r\n        let _storage = [...storage];\r\n        _storage[activeIdx].simulates[ind][e.target.name] = e.target.value;\r\n        setStorage(_storage);\r\n    }\r\n    const drop = e => {\r\n        const _storage = [...storage];\r\n        const copyListItems = _storage[activeIdx].simulates;\r\n        const dragItemContent = copyListItems[dragItem.current];\r\n        copyListItems.splice(dragItem.current, 1);\r\n        copyListItems.splice(dragOverItem.current, 0, dragItemContent);\r\n        dragItem.current = null;\r\n        dragOverItem.current = null;\r\n        setStorage(_storage);\r\n    }\r\n    const dragEnter = (e, position) => {\r\n        dragOverItem.current = position;\r\n\r\n    }\r\n    const dragStart = (e, position) => {\r\n        dragItem.current = position;\r\n\r\n    }\r\n    useEffect(() => {\r\n        let _storage = localStorage.getItem(\"simulation\");\r\n        if (_storage) {\r\n            _storage = JSON.parse(_storage);\r\n            setStorage(_storage);\r\n        }\r\n        let wss = new WebSocket(\"ws://localhost:443\");\r\n        setWS(wss);\r\n        wss.onmessage = (e) => {\r\n            let data = JSON.parse(e.data);\r\n            if (data.type == \"stop\") {\r\n                let _storage = JSON.parse(localStorage.getItem(\"simulation\"));\r\n                console.table(_storage)\r\n                let index = _storage.findIndex(item => { return item.id == data.id })\r\n                //console.log(index,id)\r\n                _storage[index].start = false;\r\n                console.log(_storage)\r\n                setStorage(_storage)\r\n            }\r\n        }\r\n        wss.onopen = (e) => {\r\n            setWSstate(true)\r\n        }\r\n        wss.onclose = (e) => {\r\n            setWSstate(false)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        let _storage = [...storage]\r\n        localStorage.setItem(\"simulation\", JSON.stringify(_storage));\r\n    }, [storage])\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"rounded shadow\" >\r\n                <div className=\"row border-dark p-3 \">\r\n                    <div className=\"col-md-3 bg-dark2 \" style={{ height: \"inherit\", borderRight: \"4px solid dimgrey\" }}>\r\n                        <div className=\" p-4 rounded\" style={{ height: \"100%\" }}>\r\n\r\n                            <button className=\"btn btn-primary\" onClick={e => { addTask(); setNewTask(\"\") }} >\r\n                                New Simulation\r\n                            </button>\r\n                            <input type=\"text\" value={newTask} onChange={e => setNewTask(e.target.value)} className=\"form-control mt-3\" />\r\n                            <h5 className=\"underline pl-2\">List of Simulation</h5>\r\n                            <div>\r\n                                <ul className=\"list-group\">\r\n                                    {storage.map((item, index) => (\r\n\r\n                                        <li key={index} onClick={e => setActiveIdx(index)} className={activeIdx == index ? \"list-group-item d-flex mt-1 justify-content-between align-item center task-item active \" : storage[index].start ? \"list-group-item d-flex mt-1 justify-content-between align-item center task-item  bg-danger\" : \"list-group-item d-flex mt-1 justify-content-between align-item center task-item \"}>\r\n                                            {item.name}\r\n                                            <span className=\"close\" onClick={e => { removeTask(index) }}>&times;</span>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    {storage.length > 0 && (\r\n\r\n\r\n                        <div className=\"col-md-9 bg-dark2\">\r\n                            <div className=\" p-5 rounded\" style={{ height: \"100%\" }}>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-3\">\r\n                                        <label>\r\n                                            IMPORT FROM OTHER Simulation\r\n                                        </label>\r\n                                        <select className=\"form-select\" onChange={e => { importExistingTask(e.target.value) }}>\r\n                                            <option> Custom Simulation</option>\r\n                                            {storage.map((item, index) => {\r\n                                                return index != activeIdx && (\r\n                                                    <option key={index} value={index} >{item.name}</option>\r\n                                                )\r\n\r\n                                            })}\r\n\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"col-md-9 rtl\">\r\n                                        {\r\n                                            storage[activeIdx] &&\r\n                                            (<button className={storage[activeIdx].start ? \"btn btn-danger\" : \"btn btn-primary\"} onClick={e => handleSubmit()}>{storage[activeIdx].start ? \"stop\" : \"Simulate\"}</button>)\r\n\r\n                                        }\r\n                                    </div>\r\n\r\n                                </div>\r\n                                <div className=\"row mt-2\">\r\n                                    <div className=\"col-md-4\">\r\n                                        <label >blocknumber:</label>\r\n                                        <input type=\"text\" className=\"form-control form-control-sm \" name=\"blockNumber\" onChange={handleChangeProperty} value={storage[activeIdx].blockNumber} />\r\n\r\n                                    </div>\r\n                                    <div className=\"col-md-4\">\r\n                                        <label >Token Address:</label>\r\n                                        <input type=\"text\" name=\"tokenAddy\" className=\"form-control form-control-sm\" onChange={handleChangeProperty} value={storage[activeIdx].tokenAddy} />\r\n\r\n                                    </div>\r\n                                    <div className=\"col-md-4\">\r\n                                        <label >Quote Token Address:</label>\r\n                                        <input type=\"text\" name=\"quoteTokenAddy\" className=\"form-control form-control-sm\" onChange={handleChangeProperty} value={storage[activeIdx].quoteTokenAddy} />\r\n\r\n                                    </div>\r\n                                </div>\r\n                                <hr />\r\n                                <div>\r\n                                    <h6>Set Balances<span className=\"btn-sm border ml-3\" onClick={e => AddBalance()} >+</span></h6>\r\n\r\n\r\n                                    {!storage[activeIdx].setBlances && (\r\n                                        <div className=\"center\"> No datas</div>\r\n                                    )}\r\n                                    {storage[activeIdx].setBlances && storage[activeIdx].setBlances.map((item, ind) => {\r\n                                        return (\r\n                                            <div className=\"row\" key={ind}>\r\n                                                <div className=\"col-md-5\">\r\n                                                    <label>Address</label>\r\n                                                    <input type=\"text\" onChange={e => { setBalance(ind, e) }} name=\"address\" value={item.address} className=\"form-control form-control-sm\" />\r\n                                                </div>\r\n                                                <div className=\"col-md-5\">\r\n                                                    <label>value</label>\r\n\r\n                                                    <input type=\"text\" onChange={e => { setBalance(ind, e) }} name=\"value\" value={item.value} className=\"form-control form-control-sm\" />\r\n                                                </div>\r\n                                                <div className=\"col-md-2 pt-4 \">\r\n                                                    <span className=\"btn btn-sm\" onClick={() => { deleteBalance(ind) }}><i className=\"far fa-trash-alt\" ></i></span>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                                <hr />\r\n                                <div>\r\n                                    <h6>Transactions For Simulation</h6>\r\n\r\n\r\n                                    {storage[activeIdx].simulates && storage[activeIdx].simulates.map((item, ind) => (\r\n                                        <div key={ind} className=\"border m-1 p-0 pl-5 pr-5 pt-1 rounded\" draggable onDragStart={e => dragStart(e, ind)} onDragEnter={e => dragEnter(e, ind)} onDragEnd={drop}>\r\n                                            {(item.op_type === \"limitbuy\" || item.op_type === \"sell\" || item.op_type === \"fomobuy\"||item.op_type == \"function_call\" ||item.op_type ==\"custom\") && (\r\n\r\n                                                <div className=\"d-flex justify-content-between\">\r\n                                                    <h6>{item.op_type.toUpperCase()}</h6>\r\n                                                    <div>\r\n                                                        <button className=\"btn \" onClick={e => { removeSimulation(ind) }}><i className=\"far fa-trash-alt\" ></i></button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                            {item.op_type === \"blockjump\" && (\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-2\">\r\n                                                    <h6>{item.op_type.toUpperCase()}</h6>\r\n                                                    </div>\r\n                                                    <div className=\"col-md-2 d-flex justify-content-end\">\r\n                                                        blockjump:\r\n                                                    </div>\r\n                                                    <div className=\"col-md-4\">\r\n                                                        <input type=\"text\" className=\"form-control form-control-sm\" value={storage[activeIdx].simulates[ind].blockjump} name=\"blockjump\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col d-flex justify-content-end\">\r\n                                                        <button className=\"btn \" onClick={e => { removeSimulation(ind) }}><i className=\"far fa-trash-alt\" ></i></button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                            {item.op_type === \"quote_approve\" && (\r\n                                                <div className=\"row\">\r\n                                                     <div className=\"col-md-2\">\r\n                                                    <h6>{item.op_type.toUpperCase()}</h6>\r\n                                                    </div>\r\n                                                    <div className=\"col-md-2 d-flex justify-content-end\">\r\n                                                        from:\r\n                                                    </div>\r\n                                                    <div className=\"col-md-6\">\r\n                                                        <input type=\"text\" className=\"form-control form-control-sm\" name=\"from\" value={storage[activeIdx].simulates[ind].from} onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col d-flex justify-content-end\">\r\n                                                        <button className=\"btn \" onClick={e => { removeSimulation(ind) }}><i className=\"far fa-trash-alt\" ></i></button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                            {item.op_type === \"approve\" && (\r\n                                                <div className=\"row\">\r\n                                                     <div className=\"col-md-2\">\r\n                                                    <h6>{item.op_type.toUpperCase()}</h6>\r\n                                                    </div>\r\n                                                    <div className=\"col-md-2 d-flex justify-content-end\">\r\n                                                        from:\r\n                                                    </div>\r\n                                                    <div className=\"col-md-6\">\r\n                                                        <input type=\"text\" className=\"form-control form-control-sm\" value={storage[activeIdx].simulates[ind].from} name=\"from\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col d-flex justify-content-end\">\r\n                                                        <button className=\"btn \" onClick={e => { removeSimulation(ind) }}><i className=\"far fa-trash-alt\" ></i></button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n\r\n                                            {item.op_type === \"addliquidity\" && (\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-6\">\r\n                                                        <label>from</label>\r\n                                                        <input type=\"text\" className=\"form-control form-control-sm\" name=\"from\" onChange={e => { changeSimulation(ind, e) }} value={storage[activeIdx].simulates[ind].from} />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-3\">\r\n                                                        <label>token_amount</label>\r\n                                                        <input type=\"text\" className=\"form-control form-control-sm\" placeholder=\"80%\" name=\"token_amount\" value={storage[activeIdx].simulates[ind].token_amount} onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-3\">\r\n                                                        <label>eth_amount</label>\r\n                                                        <input type=\"text\" value={storage[activeIdx].simulates[ind].eth_amount} className=\"form-control form-control-sm\" name=\"eth_amount\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-4\">\r\n                                                        <label>gasLimit</label>\r\n                                                        <input type=\"text\" value={storage[activeIdx].simulates[ind].gasLimit} className=\"form-control form-control-sm\" name=\"gasLimit\" placeholder=\"3000000\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col\">\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n\r\n                                            {item.op_type === \"fomobuy\" && (\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-6\">\r\n                                                        <label>from</label>\r\n                                                        <input type=\"text\" className=\"form-control form-control-sm\" value={storage[activeIdx].simulates[ind].from} name=\"from\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-3\">\r\n                                                        <label>eth_amount</label>\r\n                                                        <input type=\"text\" value={storage[activeIdx].simulates[ind].eth_amount} className=\"form-control form-control-sm\" name=\"eth_amount\" onChange={e => { changeSimulation(ind, e) }} placeholder=\"\" />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-3\">\r\n                                                        <label>gasLimit</label>\r\n                                                        <input type=\"text\" value={storage[activeIdx].simulates[ind].gasLimit} className=\"form-control form-control-sm\" name=\"gasLimit\" placeholder=\"900000\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n\r\n                                                    <div className=\"col\">\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                            {item.op_type === \"function_call\" && (\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-4\">\r\n                                                        <label>function</label>\r\n                                                        <input type=\"text\" value={storage[activeIdx].simulates[ind].function} className=\"form-control form-control-sm\" name=\"function\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-6\">\r\n                                                        <label>params</label>\r\n                                                        <input type=\"text\" className=\"form-control form-control-sm\" value={storage[activeIdx].simulates[ind].params} name=\"params\" onChange={e => { changeSimulation(ind, e) }} placeholder='[true, 1000000000, \"0x00\"]' />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-4\">\r\n                                                        <label>gasLimit</label>\r\n                                                        <input type=\"text\" value={storage[activeIdx].simulates[ind].gasLimit} className=\"form-control form-control-sm\" name=\"gasLimit\" placeholder=\"500000\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n\r\n                                                    <div className=\"col\">\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                            {item.op_type === \"limitbuy\" && (\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-6\">\r\n                                                        <label>from</label>\r\n                                                        <input type=\"text\" className=\"form-control form-control-sm\" value={storage[activeIdx].simulates[ind].from} name=\"from\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-3\">\r\n                                                        <label>token_amount</label>\r\n                                                        <input type=\"text\" value={storage[activeIdx].simulates[ind].token_amount} className=\"form-control form-control-sm\" placeholder=\"1%\" name=\"token_amount\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-3\">\r\n                                                        <label>eth_amount_max</label>\r\n                                                        <input type=\"text\" value={storage[activeIdx].simulates[ind].eth_amount} className=\"form-control form-control-sm\" name=\"eth_amount_max\" onChange={e => { changeSimulation(ind, e) }} placeholder=\"1\" />\r\n                                                    </div>\r\n\r\n                                                    <div className=\"col-md-4\">\r\n                                                        <label>gasLimit</label>\r\n                                                        <input type=\"text\" value={storage[activeIdx].simulates[ind].gasLimit} className=\"form-control form-control-sm\" name=\"gasLimit\" placeholder=\"200000\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col\">\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                            {item.op_type === \"sell\" && (\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-6\">\r\n                                                        <label>from</label>\r\n                                                        <input type=\"text\" className=\"form-control form-control-sm\" value={storage[activeIdx].simulates[ind].from} name=\"from\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-3\">\r\n                                                        <label>token_amount</label>\r\n                                                        <input type=\"text\" value={storage[activeIdx].simulates[ind].token_amount} className=\"form-control form-control-sm\" name=\"token_amount\" onChange={e => { changeSimulation(ind, e) }} placeholder='0.5%' />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-3\">\r\n                                                        <label>gasLimit</label>\r\n                                                        <input type=\"text\" value={storage[activeIdx].simulates[ind].gasLimit} className=\"form-control form-control-sm\" name=\"gasLimit\" placeholder=\"200000\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col\">\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                            {item.op_type === \"custom\" && (\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-6\">\r\n                                                        <label>from</label>\r\n                                                        <input type=\"text\" value={storage[activeIdx].simulates[ind].from} className=\"form-control form-control-sm\" name=\"from\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-6\">\r\n                                                        <label>to</label>\r\n                                                        <input type=\"text\" value={storage[activeIdx].simulates[ind].to} className=\"form-control form-control-sm\" name=\"to\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-4\">\r\n                                                        <label>data</label>\r\n                                                        <input type=\"text\" value={storage[activeIdx].simulates[ind].data} className=\"form-control form-control-sm\" name=\"data\" onChange={e => { changeSimulation(ind, e) }} placeholder=\"0x1d97b7cd\" />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-4\">\r\n                                                        <label>value</label>\r\n                                                        <input type=\"text\" value={storage[activeIdx].simulates[ind].value} className=\"form-control form-control-sm\" name=\"value\" placeholder=\"0\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-4\">\r\n                                                        <label>gasLimit</label>\r\n                                                        <input type=\"text\" value={storage[activeIdx].simulates[ind].gasLimit} className=\"form-control form-control-sm\" name=\"gasLimit\" placeholder=\"200000\" onChange={e => { changeSimulation(ind, e) }} />\r\n                                                    </div>\r\n                                                    <div className=\"col\">\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n\r\n                                        </div>\r\n                                    ))}\r\n\r\n                                    <div className=\"m-3 row\">\r\n                                        <div className=\"col-md-4\">\r\n                                            <select className=\"form-control form-select form-control-sm\" value={op_type} onChange={e => { setOp_type(e.target.value) }} >\r\n                                                {op_types.map(item => (\r\n                                                    <option key={item} value={item} >{item}</option>\r\n                                                ))}\r\n                                            </select>\r\n\r\n                                        </div>\r\n                                        <div className=\"col\">\r\n                                            <button className=\"btn btn-dark btn-sm\" onClick={e => { AddSimulation() }}>ADD</button>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"text-center\">\r\n                                    {\r\n                                        storage[activeIdx] &&\r\n                                        (<button className=\"btn btn-primary\" onClick={e => handleSubmit()}> Simulate</button>)\r\n\r\n                                    }\r\n                                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SimulatorUI;\r\n","import { useState } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './css/App.css';\r\n\r\nimport SimulatorUI from \"./SimulatorUI\"\r\nfunction App() {\r\n\tconst [page, setPage] = useState(1)\r\n\treturn (\r\n\t<div className=\"page-layout\">\r\n\t\t<div className=' bg-dark2 p-1 pt-3  pl-4 shadow d-flex '>\r\n\t\t\t<h2 className='center'>Simulation tool</h2>\r\n\t\t</div>\r\n\t\t<main>\r\n\t\t\t<div className=\"container\">\r\n\t\t\t<SimulatorUI/>\r\n\t\t\t</div>\r\n\t\t</main>\r\n\t</div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    \r\n      <App />\r\n    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}